// Generated by .NET Reflector from D:\svn\.net\Branch\Mongcent.News.XD.2.2\packages\QL.Database.1.0.2\lib\net40\QL.Database.dll
namespace QL.Database
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Text;

    public class SqlDataPagingReader : DbDataPagingReader
    {
        public SqlDataPagingReader(DbHelper dbHelper)
            : base(dbHelper)
        {
        }

        public SqlDataPagingReader(SqlConnection sqlConnection)
            : base(sqlConnection)
        {
        }

        protected virtual string GetQueryCommand()
        {
            StringBuilder builder = new StringBuilder();
            int num = ((base.PageNumber - 1) * base.PageSize) + 1;
            int num2 = base.PageNumber * base.PageSize;
            string str = !base.Condition.HasOrderBy ? "GETDATE() ASC" : base.Condition.OrderBy;
            builder.Append("SELECT * FROM (");
            builder.AppendFormat("SELECT ROW_NUMBER() OVER (ORDER BY {0}) AS _ROW_NUMBER, * FROM (", str);
            builder.Append(base.Select);
            if (base.Condition.HasCondition)
            {
                builder.Append(" ");
                builder.Append(base.Condition.ToString());
            }
            builder.Append(") [_tb1]) [_tb2]");
            builder.AppendFormat(" WHERE [_tb2].[_ROW_NUMBER] BETWEEN {0} AND {1} ORDER BY [_tb2].[_ROW_NUMBER] ASC", num, num2);
            return builder.ToString();
        }

        public override DataTable ReadAsDataTable()
        {
            DataTable table;
            try
            {
                this.BeginExecute();
                this.InitPageCount();
                if (base.RecordCount > 0)
                {
                    string queryCommand = this.GetQueryCommand();
                    using (DbCommandWrapped wrapped = base.DbHelper.CreateDbCommandWrapped(queryCommand.ToString(), base.Condition.Parameters))
                    {
                        DataSet ds = new DataSet();
                        using (DbDataAdapter adapter = base.DbHelper.CreateDbDataAdapter(wrapped.Command))
                        {
                            wrapped.FillDataSet(adapter, ds);
                            return ((ds.Tables.Count > 0) ? ds.Tables[0] : null);
                        }
                    }
                }
                table = null;
            }
            finally
            {
                this.EndExecute();
            }
            return table;
        }

        public override List<T> ReadAsDbObjectList<T>()
        {
            List<T> list;
            try
            {
                this.BeginExecute();
                this.InitPageCount();
                if (base.RecordCount > 0)
                {
                    string queryCommand = this.GetQueryCommand();
                    using (DbCommandWrapped wrapped = base.DbHelper.CreateDbCommandWrapped(queryCommand.ToString(), base.Condition.Parameters))
                    {
                        return wrapped.ExecuteDbObjectList<T>();
                    }
                }
                list = new List<T>();
            }
            finally
            {
                this.EndExecute();
            }
            return list;
        }
    }
}
